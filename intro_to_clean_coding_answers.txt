Exercises
1. In your own words, explain what clean code is and why it is important.

Answer: Clean code is important as it improves readability, understanding and code maintainability for yourself and others when you come back to it.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Answer: Good code is critical in industries such as medical devices, defence systems, machine operating, etc. as it interacts directly with the physical world and can therefore endanger its surrounding if riddled with bugs.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Answer: This isn't clean code as it isn't self-documenting, too many comments and not enough self-explanatory names for the functions and the variables.

FUNCTION convertTemperature(temperatureValue, temperatureScale)   
 IF temperatureScale = "Fahrenheit" THEN            	
 SET convertedTemperatureValue to (temperatureValue − 32) * (5/9)
 PRINT convertedTemperatureValue                
 ELSE IF temperatureScale = "Celsius" THEN       		
 SET convertedTemperatureValue to temperatureValue * 1.8000 + 32.00
 PRINT convertedTemperatureValue                      
 END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   	SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Answer: This is almost perfectly clean code as it is self-documenting and DRY. However to make it perfect we need to correct the nesting on the 3rd line so it aligns correctly.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   
   SET totalDue = subTotal * discountRate + (subTotal * tax)
   
   PRINT "Your total due is: " + totalDue

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totalDue
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totalDue
   END IF
END FUNCTION


b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
	APPEND book to guest.books
	SET book.status to "Checked Out"
	PRINT "Your books have been issued."
 ELSE
     	PRINT "Unable to check out book."
 END IF
END FUNCTION

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
END

CLASS BankOffers
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
END

Programming Questions

You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square; Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

JS code:

function checkPerfectSquare(array) {
  const reducer = (accumulator, currentValue) => accumulator + currentValue;
  let sum = array.reduce(reducer);
  let sumSquareRoot = Math.sqrt(sum);
  if (Number.isInteger(sumSquareRoot)) {
    return sumSquareRoot;
  } else {
    return sum;
  }
}


7. Duplicate; Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function isUnique(array) {
  let length = array.length;
  for(var i = 0; i < length - 1; i++) {
    for(var j = i + 1; j < length; j++){
      if(array[i] === array[j]) {
        return false
      }
    }
  }
  return true
}


Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function convertStringToArray(string) {
  let array = [];
  for(var i=0; i < string.length; i++){
    array.push(string.charAt(i));
  }
  return array;
}

function isAnagram(string1, string2) {
  if(string1.length === string2.length) {
    let array1 = convertStringToArray(string1);
    let array2 = convertStringToArray(string2);
    let counter = array2.length;
    for(var i = 0; i < array1.length; i++) {
      for(var j = 0 ; j < array2.length; j++) {
        if(array1[i] === array2[j]){
          counter--;
          array2.splice(j, 1);
          break
        } 
      }
    }
    if(counter === 0){
      console.log("true");
      return true;
    } else {
      console.log("false");
      return false;
    }
  } else {
    console.log("false");
    return false;
  } 
}
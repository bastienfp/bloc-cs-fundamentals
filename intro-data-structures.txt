1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array?

Answers:

//a
let lineUp = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

//b
lineUp.push("Mary");

//c
function findIndex(person) {
  if (lineUp.includes(person)) {
    return lineUp.indexOf(person);
  } else {
    console.log("That person is not in the line up!");
    return -1;
  }
}

findIndex("Josh");

//d
findIndex("Emily");

//e
function cutInLine(allower, cutter) {
  let allowerIndex = findIndex(allower);
  if (allowerIndex != -1) {
    lineUp.splice(allowerIndex, 0, cutter);
  } else {
    console.log("You and your friend should both get in line!");
  }
}

cutInLine("Ava", "Melissa");

//f
function leaveLine(leaver) {
  let leaverIndex = findIndex(leaver)
  if (leaverIndex != -1) {
     lineUp.splice(leaverIndex, 1);
     }
}

leaveLine("Patrick");


2. Provide another real-world example that you can model using a data structure.

Another example would be the food ordering system at a restaurant.

At its most basic, you can use an array to convey the sequence in which food should be cooked to meet the ordering queue. However, an array would fail to shorten that line up and indicate the type and quantity of food to be cooked at the same time.

3. How would your data structure allow developers to access and manipulate the data?

In this data structure, you'd want to associate an order with different types and quantities of food.
The orders themselves are sequentially ordered. They can be added and then removed but only in the proper order they were originally added.
Finally the orders themselves contain more information/references on the type of food and quantities needed to successfully close the order.
The type of foods and quantities are maintained in a separate data structure.


1. What is the main difference between a stack and a queue?

Answer: the main difference is the priority order used to arrange elements. LIFO for stacks and FIFO for queues.  

2. What are the similarities between stacks and queues?

Answer: stacks and queues are both data structures that arrange element in given order.

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

Answer: 

To implement both UNDO and REDO functions I would use a stack data structure because both functions are acting on the LAST action taken by the user. 

The user either wants to repeat (REDO) or delete (UNDO) the LAST action they just did.

Programming Questions
You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be 
converted to "!colB".

Answer:

function reverse(original) {
  //easier way: let stack = original.split('');
  let stack = [];
  for (var i = 0; i < original.length; i++) {
    stack.push(original.charAt(i));
  }
  let reversed = '';
  
  while (stack.length !== 0) {
    var i = stack.pop();
    reversed = reversed.concat(i);
  }
  console.log(reversed);
  return reversed;
}

reverse("Bloc!");

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.


Answer:

let queue = [];

function stackPush(element) {
  let oldCount = queue.length;
  queue.push(element);
  for (var i = 0; i < oldCount; i++) {
    queue.push(queue.shift());
  }
  console.log(queue);
}

function stackPop() {
  queue.shift();
  console.log(queue);
}

stackPush(1);
stackPush(2);
stackPush(3);
stackPush(4);
stackPop();


3. To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.


Answer:

class Queue extends Array {
  constructor() {
    super();
  }
  
  enqueue(e) {
   this.push(e);
   return this;
  }
  
  dequeue() {
    this.shift();
    return this;
  }
}

var testQ = new Queue();
testQ.enqueue(1);
testQ.enqueue(2);
testQ.enqueue(3);
console.log(testQ);
testQ.dequeue();
console.log(testQ);

var testQ2 = new Queue();
testQ2.enqueue(7);
testQ2.enqueue(8);
testQ2.enqueue(9);
console.log(testQ2);
testQ2.dequeue();
console.log(testQ2);
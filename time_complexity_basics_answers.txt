1. What is time complexity and what is its relation to algorithms?

Answer: Time complexity is a function that estimates the time needed to run an algorithm based on the size of the algorithm inputs.


2. What is runtime?

Answer: Runtime is the physical time duration of an algorithm (in seconds, minutes, hours, etc.). It is also used interchangeably with time complexity.

3. How is the runtime of an algorithm calculated?

Answer: Runtime is calculated by evaluating how much time a line of code is ran based based on the input of the algorithm.

We perform a limit-based exercise where n is the algorithm input and n tends towards infinity.

When assessing each line of code, you assess how many times that line of code would be ran whether it is a constant number of times or n times or more. Then you add up the terms, drop the constant and keep only the largest term.


4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

Answer:
Linear growth rate, O(1)
Logarithmic growth rate, O(log n)
Linear growth rate, O(n)
Log-Linear growth rate, O(n log n)
Quadratic growth rate, O(n^2)
Polynomial growth rate, O(n^k)
Exponential growth rate, O(2^n)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Answer:
When insulation a home, you add insulation material hoping your R value. The R-value represents how well an object, per unit of its exposed area, resists conductive flow of heat. The greater the R-value, the greater the resistance and therefore the better the thermal insulating properties.

However, going from R-0 to R-8 provides 90% of heat flow reduction, R-12 provides roughly 93%, R-16 95% and so on.

Therefore, the R-value to heat flow reduction suggest a logarithmic correlation.


6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Answer:
O(n) => linear growth rate


7. Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Answer:
O(n^2) => quadratic growth rate

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Answer:
O(2^n) => exponential growth rate


9. Out of the code snippets you just saw, which is the most time efficient?

Answer: the linearSearch function (question 6) is the most time efficient and the fibonacci function (question 8) is the least time efficient.